{
	"master": {
		"tasks": [
			{
				"id": 29,
				"title": "Create Phone Number Section in User Profile",
				"description": "This task covers the implementation of the static 'Phone Number' section in the user profile. The UI component has been built and integrated, displaying the user's phone number (or 'Not set') and an update button. The remaining work involves final testing before proceeding to the modal implementation (Task 30).",
				"status": "done",
				"dependencies": [],
				"priority": "high",
				"details": "The implementation is complete and includes: A new `PhoneNumber.tsx` component, a `PhoneNumberFragment` for GraphQL data, and integration into `AccountSettingsView.tsx`. The UI uses HeroUI components (Card, Button) consistent with the 'Password' section, including responsive layouts and an 'Edit' icon on the button. The button's `onClick` handler currently logs to the console.",
				"testStrategy": "Final testing is required. Visually inspect the profile page to confirm the new section appears correctly for users with and without a phone number. Verify the 'Update Phone Number' button is present, styled correctly, and logs to the console on click. Run existing unit tests for the component to ensure it renders the correct data passed via props and that the relay-compiler has generated types without error.",
				"subtasks": [
					{
						"id": 1,
						"title": "",
						"description": "Create the `PhoneNumber.tsx` component, mirroring the structure of `Password.tsx`.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 2,
						"title": "",
						"description": "Define the `PhoneNumberFragment` GraphQL fragment to query the `phoneNumber` field and integrate it into the `AccountSettingsViewFragment`.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 3,
						"title": "",
						"description": "Add the `PhoneNumber` component to the `AccountSettingsView.tsx` layout.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 4,
						"title": "",
						"description": "Style the component using HeroUI (Card, Button with outline variant and Edit icon) to match the existing profile sections.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 5,
						"title": "",
						"description": "Implement the `handleUpdatePhoneNumber` function with a `console.log` placeholder to be connected to the modal in a future task.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 6,
						"title": "",
						"description": "Run the relay compiler to generate necessary types and perform unit/visual testing to confirm the component renders correctly with user data.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					}
				]
			},
			{
				"id": 30,
				"title": "Build the Phone Number Update Modal Shell",
				"description": "Developed the main modal component shell, `UpdatePhoneNumberModal`, which houses the entire update flow. This included setting up the modal structure, state for visibility, and placeholders for the two steps (phone entry and verification).",
				"status": "done",
				"dependencies": [29],
				"priority": "high",
				"details": "The `UpdatePhoneNumberModal.tsx` component has been created using the `@heroui/react` `Modal` component with `size=\"md\"`. It follows the structure of existing modals like `AutofillWithAIModal.tsx`. State management for modal visibility (`isOpen`) and step tracking (`phone-entry`, `verification`) has been implemented. The modal is integrated into `AccountSettingsView.tsx`, and the 'Update Phone Number' button now controls its visibility. The modal body conditionally renders placeholder content for the `PhoneNumberEntryStep` and `VerificationTokenStep` components, with logic to reset the step to the initial state when the modal is closed.",
				"testStrategy": "Manual and unit tests confirmed that the modal opens and closes correctly when triggered from the 'Update Phone Number' button. Verified that the `onClose` callback resets the internal step state. Confirmed the modal renders with the correct `md` size and contains the standard `ModalHeader`, `ModalBody`, and `ModalFooter` structure. Placeholder content for both steps renders correctly based on the internal step state.",
				"subtasks": [
					{
						"id": 1,
						"title": "",
						"description": "Create `UpdatePhoneNumberModal.tsx` component using HeroUI Modal with size=\"md\" and center placement, following existing patterns.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 2,
						"title": "",
						"description": "Implement state management for modal visibility and a two-step flow ('phone-entry' and 'verification').",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 3,
						"title": "",
						"description": "Define TypeScript types for modal props and step management.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 4,
						"title": "",
						"description": "Add logic to reset the active step to the initial state when the modal is closed.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 5,
						"title": "",
						"description": "Integrate the modal into `AccountSettingsView.tsx` and manage its open/close state.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 6,
						"title": "",
						"description": "Connect the 'Update Phone Number' button in the `PhoneNumber` component to open the modal.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 7,
						"title": "",
						"description": "Add placeholder content with TODO comments for the phone entry and verification steps.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					}
				]
			},
			{
				"id": 31,
				"title": "Implement Phone Number Entry Form UI",
				"description": "The initial implementation of the phone number entry form is complete. This form, the first step in the 'Update Phone Number' modal, now includes client-side validation using Zod for Indian phone numbers, loading state management, and is fully integrated into the modal flow. The focus is now on final review and potential enhancements.",
				"status": "done",
				"dependencies": [30],
				"priority": "high",
				"details": "The `PhoneNumberEntryStep.tsx` component has been built using `react-hook-form` and HeroUI components. A Zod schema (`standardSchemaResolver`) provides real-time validation for Indian phone numbers (accepting formats with or without the +91 prefix). The form submission handler is connected to the modal's step transition logic. Loading states are implemented to disable the form and provide user feedback during the API call. The component is styled consistently with the existing application forms.",
				"testStrategy": "Verify the completed implementation. Unit tests should confirm that the Zod validation schema correctly identifies valid and invalid Indian phone numbers. Test the form's behavior during submission, ensuring the button is disabled and shows a loading indicator. Manually test the end-to-end flow within the modal to confirm that a valid phone number submission successfully transitions to the next step and that validation errors prevent submission and are displayed correctly.",
				"subtasks": [
					{
						"id": 1,
						"title": "",
						"description": "Create PhoneNumberEntryStep.tsx component using React Hook Form and HeroUI components.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 2,
						"title": "",
						"description": "Implement Zod schema for Indian phone number validation (+91 prefix optional) and integrate with the form using standardSchemaResolver.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 3,
						"title": "",
						"description": "Integrate the form into the UpdatePhoneNumberModal, ensuring submission triggers the step transition.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 4,
						"title": "",
						"description": "Implement loading and disabled states for the form during submission.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 5,
						"title": "",
						"description": "Add real-time validation feedback with error messages for a better user experience.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 6,
						"title": "",
						"description": "Ensure basic accessibility with proper labels, descriptions, and input types.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 7,
						"title": "",
						"description": "Review and enhance phone number validation rules based on further requirements.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					}
				]
			},
			{
				"id": 32,
				"title": "Implement Client-Side Phone Number Validation with Zod",
				"description": "Defined and integrated an enhanced Zod schema for comprehensive client-side validation of Indian phone numbers. This provides immediate, specific feedback to the user and normalizes the phone number format before API submission.",
				"status": "done",
				"dependencies": [31],
				"priority": "high",
				"details": "The final implementation uses a Zod schema with an improved regex (`/^(?:\\+91\\s?)?[6-9]\\d{9}$/`) to validate Indian mobile numbers. A `.transform()` function was added to normalize various input formats (e.g., `+91 98765 43210`, `9876543210`) into a consistent format for the API. A `.refine()` method provides additional validation checks and more user-friendly error messages. The schema is integrated with React Hook Form via `@hookform/resolvers/zod` to display real-time validation errors.",
				"testStrategy": "Unit tests were written for the Zod schema to verify the improved regex, the `.transform()` normalization logic, and the `.refine()` validation. Tests cover a range of valid and invalid inputs, including different formatting with spaces and the `+91` prefix. Component tests confirm that specific error messages are displayed correctly and that the form submission is blocked for invalid numbers.",
				"subtasks": [
					{
						"id": 1,
						"title": "",
						"description": "Enhance the Zod schema with an improved regex pattern (`/^(?:\\+91\\s?)?[6-9]\\d{9}$/`) for Indian mobile numbers starting with 6, 7, 8, or 9.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 2,
						"title": "",
						"description": "Implement a `.transform()` function to normalize the phone number input (e.g., remove spaces, handle `+91` prefix) for consistent API submission.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 3,
						"title": "",
						"description": "Add a `.refine()` validation step to the schema to handle complex formatting rules and provide more specific, user-friendly error messages.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 4,
						"title": "",
						"description": "Integrate the enhanced Zod schema with React Hook Form using `@hookform/resolvers/zod` to enable real-time validation.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 5,
						"title": "",
						"description": "Write unit tests for the Zod schema, covering valid formats (`+91 98765 43210`, `9876543210`), invalid formats, and edge cases to ensure normalization and validation work correctly.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					}
				]
			},
			{
				"id": 33,
				"title": "Integrate `requestPhoneNumberVerificationToken` Mutation",
				"description": "Integrate the `requestPhoneNumberVerificationToken` GraphQL mutation. This mutation is called when the user submits a valid phone number. The integration handles success cases by transitioning to the verification step, and provides detailed user feedback for various error scenarios and loading states.",
				"status": "done",
				"dependencies": [32],
				"priority": "high",
				"details": "Used the `useMutation` hook from `react-relay` triggered by the `onSubmit` handler from React Hook Form. The input is `{ phoneNumber: String! }`. The `onCompleted` handler transitions the modal to the verification step. The `onError` handler and mutation response logic now gracefully handle `InvalidPhoneNumberError`, `PhoneNumberAlreadyExistsError`, and `PhoneNumberVerificationTokenCooldownError` (displaying remaining seconds). Loading states are managed to disable the form during execution, and a styled error box displays user-friendly messages.",
				"testStrategy": "Use a mock GraphQL provider (e.g., `msw` or Relay's test environment) to test the mutation integration. Verify that `useMutation` is called with the correct phone number. Test the `onCompleted` callback triggers the transition to the next step. Test the error handling for each specific error type: `InvalidPhoneNumberError`, `PhoneNumberAlreadyExistsError`, and `PhoneNumberVerificationTokenCooldownError`. Verify that the correct error message is displayed in the UI for each case. Confirm that the form is disabled and a loading indicator is shown during mutation execution.",
				"subtasks": [
					{
						"id": 1,
						"title": "",
						"description": "Integrate the `useMutation` hook from `react-relay` for the `requestPhoneNumberVerificationToken` mutation.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 2,
						"title": "",
						"description": "Connect the mutation to the form's `onSubmit` handler, disabling the form during execution.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 3,
						"title": "",
						"description": "Implement the `onCompleted` handler to transition the UI to the verification code entry step upon success.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 4,
						"title": "",
						"description": "Implement comprehensive error handling for different mutation response types, including network/API failures.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 5,
						"title": "",
						"description": "Handle `InvalidPhoneNumberError` and `PhoneNumberAlreadyExistsError` by displaying a user-friendly message in the modal.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 6,
						"title": "",
						"description": "Handle `PhoneNumberVerificationTokenCooldownError` by displaying the remaining cooldown time to the user.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 7,
						"title": "",
						"description": "Implement and manage loading states to provide visual feedback during mutation execution.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 8,
						"title": "",
						"description": "Ensure TypeScript types generated from the GraphQL schema are used for the mutation payload, response, and error handling.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					}
				]
			},
			{
				"id": 34,
				"title": "Implement Verification Token Entry Form UI",
				"description": "The UI for the verification token entry form has been implemented. It includes a 6-digit numeric input field, real-time validation, and a 'Verify & Update' button with loading states. The component is fully integrated into the phone number update modal.",
				"status": "done",
				"dependencies": [30],
				"priority": "medium",
				"details": "The `VerificationTokenStep.tsx` component was created using React Hook Form and a Zod schema for validation. The schema enforces a 6-digit, numeric-only token. The HeroUI `Input` component is used for the entry field. Form state, including loading and disabled states during submission, is managed via the `useForm` hook. The component is integrated into the `UpdatePhoneNumberModal` and displays validation errors in real-time.",
				"testStrategy": "Unit and integration tests have been performed to confirm: the component renders correctly, the Zod validation schema rejects invalid inputs (non-numeric, incorrect length), the form state correctly updates, loading states are triggered on submission, and the component is correctly integrated within the modal flow.",
				"subtasks": [
					{
						"id": 1,
						"title": "",
						"description": "Create VerificationTokenStep.tsx component using React Hook Form.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 2,
						"title": "",
						"description": "Implement Zod validation schema for 6-digit numeric-only verification codes.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 3,
						"title": "",
						"description": "Use HeroUI Input component for the token field with appropriate constraints.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 4,
						"title": "",
						"description": "Implement form state management, including loading and disabled states during submission.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 5,
						"title": "",
						"description": "Add real-time validation feedback and clear error messages for invalid inputs.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 6,
						"title": "",
						"description": "Integrate the VerificationTokenStep component into the UpdatePhoneNumberModal.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 7,
						"title": "",
						"description": "Ensure consistent styling and layout with other forms in the modal.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					}
				]
			},
			{
				"id": 35,
				"title": "Integrate `updateAccountPhoneNumber` Mutation",
				"description": "Successfully integrated the `updateAccountPhoneNumber` GraphQL mutation. This mutation is called when the user submits the verification token. The implementation includes comprehensive error handling for various API responses and robust loading state management.",
				"status": "done",
				"dependencies": [33, 34],
				"priority": "high",
				"details": "In `VerificationTokenStep.tsx`, the `useMutation` hook from `react-relay` was used for the `updateAccountPhoneNumber` mutation. The mutation is triggered on form submission with the `{ phoneNumber, phoneNumberVerificationToken }` input. The implementation features:\n- **Success Handling:** Correctly processes the `Account` object on a successful response.\n- **Error Handling:** Displays user-friendly messages for specific errors like `InvalidPhoneNumberVerificationTokenError` and `InvalidPhoneNumberError`, as well as generic network/API failures. An error message component was added to the modal.\n- **State Management:** Manages loading states by disabling the form during mutation execution.\n- **Data Flow:** The `phoneNumber` is passed as a prop from the parent modal state to the verification step.\nNote: The final success flow, including closing the modal and refreshing the profile UI, is handled in a subsequent task (Task 39).",
				"testStrategy": "Mocked the `updateAccountPhoneNumber` mutation to verify its integration. Tests confirmed that the mutation is called with the correct `phoneNumber` and `token`. The `onCompleted` handler was tested to ensure it correctly processes the success payload. The `onError` handler and response logic were extensively tested to verify that specific error messages for `InvalidPhoneNumberVerificationTokenError` and `InvalidPhoneNumberError` are displayed correctly. Loading states were also verified to ensure the form is disabled during mutation execution.",
				"subtasks": [
					{
						"id": 1,
						"title": "",
						"description": "Define and create the `updateAccountPhoneNumber` GraphQL mutation.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 2,
						"title": "",
						"description": "Integrate the `useMutation` hook from `react-relay` in `VerificationTokenStep.tsx`.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 3,
						"title": "",
						"description": "Implement comprehensive error handling for `InvalidPhoneNumberVerificationTokenError` and `InvalidPhoneNumberError`.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 4,
						"title": "",
						"description": "Implement loading states to disable the form during mutation execution.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 5,
						"title": "",
						"description": "Add a styled error display component within the modal to show user-friendly error messages.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 6,
						"title": "",
						"description": "Create and apply TypeScript types for the mutation's input, response, and error structures.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 7,
						"title": "",
						"description": "Pass the `phoneNumber` from the parent modal state down to the `VerificationTokenStep` component.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 8,
						"title": "",
						"description": "Connect the mutation to the form submission flow, triggering it on submit.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					},
					{
						"id": 9,
						"title": "",
						"description": "Correct GraphQL response types to align with the schema, specifically for `Account`, `InvalidPhoneNumberVerificationTokenError`, and `InvalidPhoneNumberError`.",
						"status": "done",
						"dependencies": [],
						"details": "",
						"testStrategy": ""
					}
				]
			},
			{
				"id": 36,
				"title": "Implement Loading States for Mutations",
				"description": "Implement loading states for both mutation calls. The UI should provide clear feedback to the user that a request is in progress.",
				"details": "The `useMutation` hook in Relay returns a boolean `isInFlight`. Use this flag to manage loading states. When `isInFlight` is true, disable the submit button in both the phone entry and token verification forms. Optionally, change the button text to 'Sending...' or 'Verifying...' and show a small spinner icon inside the button for better UX.",
				"testStrategy": "In mocked tests, set the mutation to a pending state. Verify that the submit button becomes disabled and displays the loading indicator. Ensure the button is re-enabled once the mutation completes or errors out.",
				"priority": "medium",
				"dependencies": [33, 35],
				"status": "pending",
				"subtasks": []
			},
			{
				"id": 37,
				"title": "Implement GraphQL Error Handling and Display",
				"description": "Implement comprehensive error handling for all specified failure scenarios, displaying user-friendly messages within the modal.",
				"details": "In the `onError` callbacks for both mutations, inspect the GraphQL error object. The backend will return a union type. Use a `switch` statement on `error.__typename` to handle each case: `InvalidPhoneNumberError`, `PhoneNumberAlreadyExistsError`, `PhoneNumberVerificationTokenCooldownError`, `InvalidPhoneNumberVerificationTokenError`. Store the corresponding user-friendly message in a state variable and display it near the form's submit button.",
				"testStrategy": "For each error type, write a test where the mock API returns that specific error. Verify that the correct error message is displayed in the UI and that the user can attempt to submit the form again.",
				"priority": "high",
				"dependencies": [33, 35],
				"status": "pending",
				"subtasks": []
			},
			{
				"id": 38,
				"title": "Implement Resend Token and Cooldown Logic",
				"description": "Implement the 'Resend Token' button with its associated cooldown logic to prevent abuse. The button should be disabled during the cooldown period, with a visible timer.",
				"details": "In the `VerificationTokenStep` component, add a 'Resend' button. When clicked, it re-triggers the `requestPhoneNumberVerificationToken` mutation. Upon successful request (or on receiving a `PhoneNumberVerificationTokenCooldownError`), start a timer. Use `useState` for the countdown seconds and `useEffect` with `setInterval` to decrement it. Display the remaining time to the user (e.g., 'Resend in {seconds}s'). The 'Resend' button should be disabled while the timer is active.",
				"testStrategy": "Test that clicking 'Resend' calls the `requestPhoneNumberVerificationToken` mutation. Mock a cooldown error response and verify the timer starts and the button is disabled. Use `jest.useFakeTimers()` to test the countdown logic without waiting.",
				"priority": "medium",
				"dependencies": [34, 37],
				"status": "pending",
				"subtasks": []
			},
			{
				"id": 39,
				"title": "Implement Success Flow and Profile UI Update",
				"description": "Ensure that upon a successful phone number update, the modal closes and the phone number displayed in the main profile section is updated to reflect the new value.",
				"details": "In the `onCompleted` callback of the `updateAccountPhoneNumber` mutation, call the `onClose` function to dismiss the modal. To update the UI, either use Relay's optimistic update feature to immediately show the new number or configure the mutation to refetch the user profile data. The PRD mentions optimistic updates as a pattern, so that should be the preferred approach.",
				"testStrategy": "In an integration test, simulate a successful update. Verify that the modal closes. Check that the text in the phone number section on the profile page updates to the new number. If using optimistic updates, verify the UI updates instantly, even before the mock API resolves.",
				"priority": "medium",
				"dependencies": [35],
				"status": "pending",
				"subtasks": []
			},
			{
				"id": 40,
				"title": "Ensure Responsive Design for the Modal Flow",
				"description": "Ensure the entire phone number update flow, including the modal and its form elements, is fully responsive and provides a seamless experience on mobile, tablet, and desktop devices.",
				"details": "Review all new components (`UpdatePhoneNumberModal`, `PhoneNumberEntryStep`, `VerificationTokenStep`) using browser developer tools to simulate different screen sizes. Apply responsive styles using HeroUI's built-in responsive props or custom media queries if necessary. Ensure inputs are easily tappable and content does not overflow on small screens.",
				"testStrategy": "Perform manual testing on various device viewports (e.g., 360px, 768px, 1024px). Use automated visual regression testing tools like Chromatic or Percy to catch unintended UI changes across different screen sizes. Verify that all elements are legible and usable on a small mobile screen.",
				"priority": "medium",
				"dependencies": [30, 31, 34],
				"status": "pending",
				"subtasks": []
			},
			{
				"id": 41,
				"title": "Implement Accessibility (A11y) Features",
				"description": "Implement accessibility (a11y) best practices for the modal and its forms, including keyboard navigation, focus management, and ARIA attributes.",
				"details": "Ensure the modal traps focus, meaning the user cannot tab to elements outside the modal when it's open. Use a library like `focus-trap-react` if not provided by HeroUI's `Modal`. Add `aria-label` attributes to all form inputs and buttons. The modal should be dismissible with the 'Escape' key. Ensure a logical focus order when tabbing through the form elements.",
				"testStrategy": "Perform manual keyboard-only navigation. Verify that all interactive elements (inputs, buttons) are focusable and in a logical order. Use an automated accessibility checker like Axe DevTools to scan for violations. Test with a screen reader (e.g., VoiceOver, NVDA) to ensure the flow is understandable.",
				"priority": "low",
				"dependencies": [30, 31, 34],
				"status": "pending",
				"subtasks": []
			},
			{
				"id": 42,
				"title": "Enforce Full TypeScript Type Safety",
				"description": "Ensure all new components and logic are strongly typed using TypeScript, including props, state, and GraphQL mutation payloads and responses.",
				"details": "Generate TypeScript types from the GraphQL schema using the Relay compiler. Use these generated types for mutation inputs, outputs, and error unions. Define explicit types for all component props (e.g., `UpdatePhoneNumberModalProps`) and internal state variables. Avoid using `any` or implicit types.",
				"testStrategy": "Run the TypeScript compiler (`tsc --noEmit`) as part of the CI/CD pipeline to catch any type errors. Review code for usage of `any` and ensure all props and state have explicit types. Verify that the types generated by Relay are correctly imported and used in the `useMutation` hooks.",
				"priority": "medium",
				"dependencies": [33, 35],
				"status": "pending",
				"subtasks": []
			},
			{
				"id": 43,
				"title": "Develop End-to-End Tests for the Full Flow",
				"description": "Create end-to-end (E2E) tests to validate the entire user flow, from opening the modal to successfully updating the phone number, including handling common error scenarios.",
				"details": "Using a testing framework like Cypress or Playwright, write test scripts that simulate the full user journey. Test cases should include: 1. Successful update flow. 2. Submitting an invalid phone number format. 3. Submitting a phone number that already exists. 4. Submitting an incorrect verification token. 5. Using the resend token functionality.",
				"testStrategy": "Run the E2E test suite against a staging or test environment that has the mock GraphQL handlers configured. The tests should assert that the UI updates correctly at each step, error messages appear when expected, and the final phone number is updated on the profile page upon success.",
				"priority": "medium",
				"dependencies": [
					29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42
				],
				"status": "pending",
				"subtasks": []
			}
		],
		"metadata": {
			"created": "2025-06-26T11:00:37.508Z",
			"updated": "2025-07-30T16:45:51.785Z",
			"description": "Tasks for master context"
		}
	}
}
