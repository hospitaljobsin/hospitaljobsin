services:
  test-caddy:
    image: caddy:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    expose:
      - 80 # http
      - 443 # https
    volumes:
      - test_caddy_data:/data
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./certs/localtest.me.pem:/etc/caddy/certs/localtest.me.pem:ro
      - ./certs/localtest.me-key.pem:/etc/caddy/certs/localtest.me-key.pem:ro
    environment:
      - SEEKER_PORTAL_HOST=test-seeker-portal-ui
      - ACCOUNTS_HOST=test-accounts-ui
      - SERVER_HOST=test-server
      - RECRUITER_PORTAL_CORE_HOST=test-recruiter-portal-core
      - RECRUITER_DASHBOARD_HOST=test-recruiter-dashboard
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:2019/config/"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      test-server:
        condition: service_healthy
      test-accounts-ui:
        condition: service_healthy

  test-server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: development-server
    ports:
      - "8000:8000"
    environment:
      SERVER_DEBUG: 'true'
      SERVER_ENVIRONMENT: 'testing'
      SERVER_DATABASE_URL: 'mongodb://user:pass@test-mongodb:27017/?directConnection=true'
      SERVER_HOST: '0.0.0.0'
      SERVER_PORT: '8000'
      SERVER_LOG_LEVEL: 'INFO'
      SERVER_CORS_ALLOW_ORIGINS: '["https://localtest.me"]'
      SERVER_CORS_ALLOW_ORIGIN_REGEX: 'https://.*\.localtest\.me'
      SERVER_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      SERVER_GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      SERVER_GOOGLE_API_KEY: XXXXXXXXXXXXX
      SERVER_GOOGLE_GEMINI_MODEL: "gemini/gemini-2.5-flash-preview-04-17"
      SERVER_EMAIL_HOST: 'mailcatcher'
      SERVER_EMAIL_PORT: '1025'
      SERVER_EMAIL_USERNAME: ''
      SERVER_EMAIL_PASSWORD: ''
      SERVER_EMAIL_FROM: 'noreply@example.com'
      SERVER_CAPTCHA_SECRET_KEY: "1x0000000000000000000000000000000AA"
      SERVER_S3_BUCKET_NAME: "medicaljobs"
      SERVER_ACCOUNTS_BASE_URL: "https://accounts.localtest.me"
      SERVER_SEEKER_PORTAL_BASE_URL: "https://localtest.me"
      SERVER_RECRUITER_PORTAL_BASE_URL: "https://recruiter.localtest.me"
      SERVER_RP_ID: 'localtest.me'
      SERVER_RP_NAME: 'Starter'
      SERVER_RP_EXPECTED_ORIGIN: 'https://accounts.localtest.me'
      SERVER_JWE_SECRET_KEY: "ca07d5f965a534ffb07d1699e30385a6"
      SERVER_EMAIL_VERIFICATION_TOKEN_COOLDOWN: 20
      SERVER_PASSWORD_RESET_TOKEN_COOLDOWN: 20
      SERVER_GEOCODER_DOMAIN: "localhost:8080"
      SERVER_GEOCODER_USER_AGENT: "medical-jobs-server"
      SERVER_SENTRY_DSN: ${SERVER_SENTRY_DSN}
      SERVER_PERSISTED_QUERIES_PATH: "query_map.json"
      SERVER_SESSION_COOKIE_DOMAIN: '.localtest.me'
      SERVER_SESSION_COOKIE_SECURE: True
      SERVER_SERPER_API_KEY: "XXXXXXXXXXXXXX"
      SERVER_REDIS_HOST: "test-redis"
      SERVER_REDIS_PORT: 6379
      SERVER_REDIS_SSL: false
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health/"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      test-mongodb:
        condition: service_healthy

  test-accounts-ui:
    build:
      context: .
      dockerfile: apps/accounts/Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=https://api.localtest.me
        - NEXT_PUBLIC_INTERNAL_API_URL=http://test-server:8000
        - NEXT_PUBLIC_URL=https://accounts.localtest.me
        - NEXT_PUBLIC_CAPTCHA_SITE_KEY=1x00000000000000000000AA
        - NEXT_PUBLIC_RECRUITER_PORTAL_BASE_URL=https://recruiter.localtest.me
        - NEXT_PUBLIC_SEEKER_PORTAL_BASE_URL=https://localtest.me
        - NEXT_PUBLIC_SESSION_COOKIE_KEY=user_session
        - NEXT_PUBLIC_SENTRY_DSN=${ACCOUNTS_UI_SENTRY_DSN}
        - NEXT_PUBLIC_SENTRY_ORGANIZATION=hospitaljobsin
        - NEXT_PUBLIC_SENTRY_PROJECT=hospital-jobs-accounts-ui
        - NEXT_PUBLIC_ENVIRONMENT=testing
        - NEXT_PUBLIC_ROOT_DOMAIN=localtest.me
    ports:
      - "5002:5002"
    environment:
        HOST: 0.0.0.0
        JWE_SECRET_KEY: "ca07d5f965a534ffb07d1699e30385a6"
        NODE_ENV: test
        CI: ${CI}
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5002/api/health/"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      test-server:
        condition: service_healthy

  test-seeker-portal-ui:
    build:
      context: .
      dockerfile: apps/seeker-portal/Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=https://api.localtest.me
        - NEXT_PUBLIC_INTERNAL_API_URL=http://test-server:8000
        - NEXT_PUBLIC_URL=https://localtest.me
        - NEXT_PUBLIC_RECRUITER_PORTAL_BASE_URL=https://recruiter.localtest.me
        - NEXT_PUBLIC_ACCOUNTS_BASE_URL=https://accounts.localtest.me
        - NEXT_PUBLIC_SESSION_COOKIE_KEY=user_session
        - NEXT_PUBLIC_SENTRY_DSN=${SEEKER_PORTAL_UI_SENTRY_DSN}
        - NEXT_PUBLIC_SENTRY_ORGANIZATION=hospitaljobsin
        - NEXT_PUBLIC_SENTRY_PROJECT=hospital-jobs-seeker-portal-ui
        - NEXT_PUBLIC_ENVIRONMENT=testing
    ports:
      - "5000:5000"
    environment:
        HOST: 0.0.0.0
        JWE_SECRET_KEY: "ca07d5f965a534ffb07d1699e30385a6"
        NODE_ENV: test
        CI: ${CI}
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5000/api/health/"]
      interval: 10s
      timeout: 5s
      retries: 10
    depends_on:
      test-server:
        condition: service_healthy

  mailcatcher:
    image: schickling/mailcatcher:latest
    ports:
      - "1080:1080"
      - "1025:1025"

  test-mongodb:
    image: mongodb/mongodb-atlas-local:8.0.1
    ports:
      - "27017:27017"
    environment:
      - MONGODB_INITDB_ROOT_USERNAME=user
      - MONGODB_INITDB_ROOT_PASSWORD=pass
      - RUNNER_LOG_FILE=/dev/stderr
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 10
  test-redis:
    image: docker.io/bitnami/redis:latest
    environment:
      - ALLOW_EMPTY_PASSWORD=yes # Or set a password with REDIS_PASSWORD
    ports:
      - "6379:6379"
    volumes:
      - test_redis_data:/bitnami/redis/data

  # playwright:
  #   image: mcr.microsoft.com/playwright:v1.51.0-noble
  #   environment:
  #     PLAYWRIGHT_BROWSERS_PATH: /usr/bin
  #     CI: true
  #   volumes:
  #     - /usr/bin:/usr/bin
  #   depends_on:
  #     test-accounts-ui:
  #       condition: service_healthy

volumes:
  test_mongodb_data:
    driver: local
  test_caddy_data:
    driver: local
  test_redis_data:
    driver: local
