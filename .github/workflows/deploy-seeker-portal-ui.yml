name: Build and Deploy Seeker Portal UI

on:
  push:
    branches:
      - main
      - staging
    paths:
      - 'apps/seeker-portal/**'
      - '.github/workflows/deploy-seeker-portal-ui.yml'
  workflow_run:
    workflows: ["Deploy Backend"]
    types:
      - completed

concurrency:
  group: ${{ github.workflow }}  # Ensures only one run of this workflow at a time
  cancel-in-progress: false      # Waits instead of cancelling previous runs

env:  # repo-level and non-env-specific secrets/vars
  AWS_ACCESS_KEY_ID: ${{ secrets.DEPLOYMENT_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOYMENT_AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
  check:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
    outputs:
      query_map_changed: ${{ steps.detect.outputs.changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect persisted-query changes
        uses: ./.github/actions/detect-changes
        id: detect
        with:
          path: server/query_map.json

  build-and-push:
    needs: check
    environment: ${{ github.ref_name == 'main' && 'production' || 'staging' }}
    runs-on: ubuntu-latest
    # Only deploy when:
    #  • a backend workflow_run happened (so server is already up), OR
    #  • a push happened and query_map.json did NOT change
    if: github.event_name == 'workflow_run' || (github.event_name == 'push' && needs.check.outputs.query_map_changed == false)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - uses: actions/cache@v4
        with:
          # Cache the .next/cache folder for the apps/seeker-portal app
          path: |
            apps/seeker-portal/.next/cache
          # Generate a new cache whenever the lockfile or source files change
          key: ${{ runner.os }}-nextjs-seeker-portal-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('apps/seeker-portal/**/*.[jt]s', 'apps/seeker-portal/**/*.[jt]sx', 'apps/seeker-portal/**/*.{css,md,mdx}') }}
          # If source files changed but pnpm-lock.yaml didn’t, use the previous cache
          restore-keys: |
            ${{ runner.os }}-nextjs-seeker-portal-${{ hashFiles('pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: pnpm install --filter seeker-portal --frozen-lockfile --shamefully-hoist

      - name: Validate Relay Compiler Artifacts
        run: pnpm --filter seeker-portal run relay --validate

      # TODO: use pnpm workspace config while building with sst
      - name: SST Deploy
        working-directory: ./apps/seeker-portal
        run: npx sst deploy --stage ${{ github.ref_name == 'main' && 'production' || 'staging' }} --print-logs
        env:
            SST_VPC_PRIVATE_SUBNETS: ${{ vars.SST_VPC_PRIVATE_SUBNETS }}
            SST_VPC_SECURITY_GROUPS: ${{ vars.SST_VPC_SECURITY_GROUPS }}
            SST_SEEKER_PORTAL_DOMAIN: ${{vars.SST_SEEKER_PORTAL_DOMAIN }}
            SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
            NEXT_PUBLIC_API_URL: ${{ vars.SST_API_URL }}
            NEXT_PUBLIC_INTERNAL_API_URL: ${{ vars.SST_API_URL }}
            NEXT_PUBLIC_URL: ${{ vars.SST_SEEKER_PORTAL_BASE_URL }}
            NEXT_PUBLIC_ACCOUNTS_BASE_URL: ${{ vars.SST_ACCOUNTS_BASE_URL }}
            NEXT_PUBLIC_RECRUITER_PORTAL_BASE_URL: ${{ vars.SST_RECRUITER_PORTAL_BASE_URL}}
            NEXT_PUBLIC_SESSION_COOKIE_KEY: user_session
            NEXT_PUBLIC_ENVIRONMENT: production
            NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.SEEKER_PORTAL_SENTRY_DSN }}
            NEXT_PUBLIC_SENTRY_ORGANIZATION: ${{ vars.SENTRY_ORGANIZATION }}
            NEXT_PUBLIC_SENTRY_PROJECT: ${{vars.SEEKER_PORTAL_SENTRY_PROJECT}}
            AWS_SECRET_ID: ${{ secrets.SST_SEEKER_PORTAL_SECRET_ID }}
            SKIP_ENV_VALIDATION: true
            NODE_ENV: production
            BASIC_AUTH_USERNAME: ${{ secrets.BASIC_AUTH_USERNAME }}
            BASIC_AUTH_PASSWORD: ${{ secrets.BASIC_AUTH_PASSWORD }}
            NEXT_PUBLIC_POSTHOG_KEY: ${{ secrets.POSTHOG_API_KEY }}
            NEXT_PUBLIC_POSTHOG_HOST: ${{ vars.POSTHOG_API_HOST }}

# TODO: wait for relevant tests to pass before building and pushing
