name: Deploy Backend

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
      - '.github/workflows/deploy-backend.yml'

concurrency:
  group: ${{ github.workflow }}  # Ensures only one run of this workflow at a time
  cancel-in-progress: false      # Waits instead of cancelling previous runs

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEPLOYMENT_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEPLOYMENT_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        env:
          AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.DEPLOYMENT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEPLOYMENT_AWS_SECRET_ACCESS_KEY }}
        with:
          context: ./server
          target: production-server
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.AWS_BACKEND_IMAGE_NAME }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ vars.AWS_BACKEND_IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            AWS_DEFAULT_REGION=${{ env.AWS_DEFAULT_REGION }}
            AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}

      # - name: Update AWS Lambda function
      #   env:
      #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_NAME: ${{ vars.AWS_BACKEND_IMAGE_NAME }}
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: aws lambda update-function-code --function-name ${{ vars.AWS_BACKEND_FUNCTION_NAME }} --image-uri $REGISTRY/$IMAGE_NAME:$IMAGE_TAG

      - name: Update AWS ECS Service
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: ${{ vars.AWS_BACKEND_IMAGE_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "${{vars.AWS_BACKEND_ECS_TASK_FAMILY}}")
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$REGISTRY/$IMAGE_NAME:$IMAGE_TAG" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) |  del(.registeredAt)  | del(.registeredBy)')
          NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION")
          NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
          aws ecs update-service --cluster ${{vars.AWS_BACKEND_ECS_CLUSTER}} --service ${{vars.AWS_BACKEND_ECS_SERVICE}} --task-definition ${{vars.AWS_BACKEND_ECS_TASK_FAMILY}}:${NEW_REVISION}



# TODO: wait for relevant tests to pass before building and pushing
